__BRYTHON__.VFS_timestamp = 1632692060653
__BRYTHON__.use_VFS = true
var scripts = {"$timestamp": 1632692060653, "browser": [".py", "", [], 1], "browser.widgets.dialog": [".py", "from browser import console,document,html,window\n\nstyle_sheet=\"\"\"\n:root {\n    --brython-dialog-font-family: Arial;\n    --brython-dialog-font-size: 100%;\n    --brython-dialog-bgcolor: #fff;\n    --brython-dialog-border-color: #000;\n    --brython-dialog-title-bgcolor: CadetBlue;\n    --brython-dialog-title-color: #fff;\n    --brython-dialog-close-bgcolor: #fff;\n    --brython-dialog-close-color: #000;\n}\n\n.brython-dialog-main {\n    font-family: var(--brython-dialog-font-family);\n    font-size: var(--brython-dialog-font-size);\n    background-color: var(--brython-dialog-bgcolor);\n    left: 10px;\n    top: 10px;\n    border-style: solid;\n    border-color: var(--brython-dialog-border-color);\n    border-width: 1px;\n    z-index: 10;\n}\n\n.brython-dialog-title {\n    background-color: var(--brython-dialog-title-bgcolor);\n    color: var(--brython-dialog-title-color);\n    border-style: solid;\n    border-color: var(--brython-dialog-border-color);\n    border-width: 0px 0px 1px 0px;\n    padding: 0.4em;\n    cursor: default;\n}\n\n.brython-dialog-close {\n    float: right;\n    background-color: var(--brython-dialog-close-bgcolor);\n    color: var(--brython-dialog-close-color);\n    cursor: default;\n    padding: 0.1em;\n}\n\n.brython-dialog-panel {\n    padding: 0.6em;\n}\n\n.brython-dialog-message {\n    padding-right: 0.6em;\n}\n\n.brython-dialog-button {\n    margin: 0.5em;\n}\n\"\"\"\n\n\nclass Dialog(html.DIV):\n ''\n\n\n\n\n\n \n \n def __init__(self,title=\"\",*,\n top=None ,left=None ,ok_cancel=False ,default_css=True ):\n  if default_css:\n   for stylesheet in document.styleSheets:\n    if stylesheet.ownerNode.id ==\"brython-dialog\":\n     break\n   else :\n    document <=html.STYLE(style_sheet,id=\"brython-dialog\")\n    \n  html.DIV.__init__(self,style=dict(position=\"absolute\"),\n  Class=\"brython-dialog-main\")\n  \n  self.title_bar=html.DIV(html.SPAN(title),Class=\"brython-dialog-title\")\n  self <=self.title_bar\n  self.close_button=html.SPAN(\"&times;\",Class=\"brython-dialog-close\")\n  self.title_bar <=self.close_button\n  self.close_button.bind(\"click\",self.close)\n  self.panel=html.DIV(Class=\"brython-dialog-panel\")\n  self <=self.panel\n  \n  if ok_cancel:\n   ok_cancel_zone=html.DIV(style={\"text-align\":\"center\"})\n   ok,cancel=\"Ok\",\"Cancel\"\n   if isinstance(ok_cancel,(list,tuple)):\n    if not len(ok_cancel)==2:\n     raise ValueError(\n     f\"ok_cancel expects 2 elements, got {len(ok_cancel)}\")\n    ok,cancel=ok_cancel\n   self.ok_button=html.BUTTON(ok,Class=\"brython-dialog-button\")\n   self.cancel_button=html.BUTTON(cancel,\n   Class=\"brython-dialog-button\")\n   self.cancel_button.bind(\"click\",self.close)\n   ok_cancel_zone <=self.ok_button+self.cancel_button\n   self <=ok_cancel_zone\n   \n  document <=self\n  cstyle=window.getComputedStyle(self)\n  \n  \n  if left is None :\n   width=round(float(cstyle.width[:-2])+0.5)\n   left=int((window.innerWidth -width)/2)\n  self.left=left\n  self.style.left=f'{left}px'\n  if top is None :\n   height=round(float(cstyle.height[:-2])+0.5)\n   top=int((window.innerHeight -height)/2)\n   \n  top +=document.scrollingElement.scrollTop\n  self.top=top\n  self.style.top=f'{top}px'\n  \n  self.title_bar.bind(\"mousedown\",self.mousedown)\n  self.title_bar.bind(\"touchstart\",self.mousedown)\n  self.title_bar.bind(\"mouseup\",self.mouseup)\n  self.title_bar.bind(\"touchend\",self.mouseup)\n  self.bind(\"leave\",self.mouseup)\n  self.is_moving=False\n  \n def close(self,*args):\n  self.remove()\n  \n def mousedown(self,event):\n  document.bind(\"mousemove\",self.mousemove)\n  document.bind(\"touchmove\",self.mousemove)\n  self.is_moving=True\n  self.initial=[self.left -event.x,self.top -event.y]\n  \n  event.preventDefault()\n  \n def mousemove(self,event):\n  if not self.is_moving:\n   return\n   \n   \n  self.left=self.initial[0]+event.x\n  self.top=self.initial[1]+event.y\n  \n def mouseup(self,event):\n  self.is_moving=False\n  document.unbind(\"mousemove\")\n  document.unbind(\"touchmove\")\n  \n  \nclass EntryDialog(Dialog):\n ''\n\n\n\n\n\n\n\n\n\n \n \n def __init__(self,title,message=None ,*,\n top=None ,left=None ,default_css=True ):\n  Dialog.__init__(self,title,\n  top=top,left=left,ok_cancel=True ,\n  default_css=default_css)\n  self.message=html.SPAN(message,Class=\"brython-dialog-message\")\\\n  or \"\"\n  self.entry=html.INPUT()\n  self.panel <=self.message+self.entry\n  self.entry.focus()\n  \n  self.entry.bind(\"keypress\",self.callback)\n  self.ok_button.bind(\"click\",self.callback)\n  \n @property\n def value(self):\n  return self.entry.value\n  \n def callback(self,evt):\n  if evt.target ==self.entry and evt.keyCode !=13:\n   return\n  self.dispatchEvent(window.Event.new(\"entry\"))\n  \nclass InfoDialog(Dialog):\n ''\n \n def __init__(self,title,message,*,\n top=None ,left=None ,default_css=True ,\n remove_after=None ,ok=False ):\n  ''\n  \n  Dialog.__init__(self,title,\n  top=top,left=left,default_css=default_css)\n  self.panel <=html.DIV(message)\n  if ok:\n   ok=ok if isinstance(ok,str)else \"Ok\"\n   self.ok_button=html.BUTTON(ok,Class=\"brython-dialog-button\")\n   self.panel <=html.P()\n   self.panel <=html.DIV(self.ok_button,\n   style={\"text-align\":\"center\"})\n   self.ok_button.bind(\"click\",lambda ev:self.remove())\n  if remove_after:\n   if not isinstance(remove_after,(int,float)):\n    raise TypeError(\"remove_after should be a number, not \"+\n    str(remove_after.__class__.__name__))\n   window.setTimeout(self.close,remove_after *1000)\n", ["browser.console", "browser", "browser.window", "browser.document", "browser.html"]], "browser.widgets": [".py", "", [], 1], "sys": [".py", "\nfrom _sys import *\nimport javascript\n\n_getframe=Getframe\n\nabiflags=0\n\ndef audit(event,*args):\n ''\n pass\n \nbrython_debug_mode=__BRYTHON__.debug\n\nbase_exec_prefix=__BRYTHON__.brython_path\n\nbase_prefix=__BRYTHON__.brython_path\n\nbuiltin_module_names=__BRYTHON__.builtin_module_names\n\nbyteorder='little'\n\ndont_write_bytecode=True\n\nexec_prefix=__BRYTHON__.brython_path\n\nexecutable=__BRYTHON__.brython_path+'/brython.js'\n\nargv=[__BRYTHON__.script_path]\n\n\ndef displayhook(value):\n if value is not None :\n  stdout.write(repr(value))\n  \ndef exit(i=None ):\n raise SystemExit('')\n \nclass flag_class:\n\n def __init__(self):\n  self.debug=0\n  self.inspect=0\n  self.interactive=0\n  self.optimize=0\n  self.dont_write_bytecode=0\n  self.no_user_site=0\n  self.no_site=0\n  self.ignore_environment=0\n  self.verbose=0\n  self.bytes_warning=0\n  self.quiet=0\n  self.hash_randomization=1\n  \nflags=flag_class()\n\nclass float_info:\n mant_dig=53\n max=javascript.Number.MAX_VALUE\n min=javascript.Number.MIN_VALUE\n radix=2\n \ndef getfilesystemencoding(*args,**kw):\n ''\n\n \n return 'utf-8'\n \ndef getfilesystemencodeerrors():\n return \"utf-8\"\n \ndef getrecursionlimit():\n return 200\n \ndef intern(string):\n return string\n \nclass int_info:\n bits_per_digit=30\n sizeof_digit=4\n \nmaxsize=2 **63 -1\n\nmaxunicode=1114111\n\nplatform=\"brython\"\n\nprefix=__BRYTHON__.brython_path\n\nversion='.'.join(str(x)for x in __BRYTHON__.version_info[:3])\nversion +=\" (default, %s) \\n[Javascript 1.5] on Brython\"\\\n%__BRYTHON__.compiled_date\nhexversion=0x030800f0\n\nclass _version_info:\n\n def __init__(self,version_info):\n  self.version_info=version_info\n  self.major=version_info[0]\n  self.minor=version_info[1]\n  self.micro=version_info[2]\n  self.releaselevel=version_info[3]\n  self.serial=version_info[4]\n  \n def __getitem__(self,index):\n  if isinstance(self.version_info[index],list):\n   return tuple(self.version_info[index])\n  return self.version_info[index]\n  \n def hexversion(self):\n  try :\n   return '0%d0%d0%d'%(self.major,self.minor,self.micro)\n  finally :\n   return '0%d0000'%(self.major)\n   \n def __str__(self):\n  _s=\"sys.version(major=%d, minor=%d, micro=%d, releaselevel='%s', \"\\\n  \"serial=%d)\"\n  return _s %(self.major,self.minor,self.micro,\n  self.releaselevel,self.serial)\n  \n def __eq__(self,other):\n  if isinstance(other,tuple):\n   return (self.major,self.minor,self.micro)==other\n   \n  raise Error(\"Error! I don't know how to compare!\")\n  \n def __ge__(self,other):\n  if isinstance(other,tuple):\n   return (self.major,self.minor,self.micro)>=other\n   \n  raise Error(\"Error! I don't know how to compare!\")\n  \n def __gt__(self,other):\n  if isinstance(other,tuple):\n   return (self.major,self.minor,self.micro)>other\n   \n  raise Error(\"Error! I don't know how to compare!\")\n  \n def __le__(self,other):\n  if isinstance(other,tuple):\n   return (self.major,self.minor,self.micro)<=other\n   \n  raise Error(\"Error! I don't know how to compare!\")\n  \n def __lt__(self,other):\n  if isinstance(other,tuple):\n   return (self.major,self.minor,self.micro)<other\n   \n  raise Error(\"Error! I don't know how to compare!\")\n  \n def __ne__(self,other):\n  if isinstance(other,tuple):\n   return (self.major,self.minor,self.micro)!=other\n   \n  raise Error(\"Error! I don't know how to compare!\")\n  \n  \n  \nversion_info=_version_info(__BRYTHON__.version_info)\n\nclass _implementation:\n\n def __init__(self):\n  self.name='brython'\n  self.version=_version_info(__BRYTHON__.implementation)\n  self.hexversion=self.version.hexversion()\n  self.cache_tag=None\n  \n def __repr__(self):\n  return \"namespace(name='%s' version=%s hexversion='%s')\"%(self.name,\n  self.version,self.hexversion)\n  \n def __str__(self):\n  return \"namespace(name='%s' version=%s hexversion='%s')\"%(self.name,\n  self.version,self.hexversion)\n  \nimplementation=_implementation()\n\nclass _hash_info:\n\n def __init__(self):\n  self.width=32\n  self.modulus=2147483647\n  self.inf=314159\n  self.nan=0\n  self.imag=1000003\n  self.algorithm='siphash24'\n  self.hash_bits=64\n  self.seed_bits=128\n  cutoff=0\n  \n def __repr__(self):\n \n  return \"sys.hash_info(width=32, modulus=2147483647, inf=314159, \"\\\n  \"nan=0, imag=1000003, algorithm='siphash24', hash_bits=64, \"\\\n  \"seed_bits=128, cutoff=0)\"\n  \nhash_info=_hash_info()\n\nclass _float_info:\n ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n def __init__(self):\n  self.dig=15\n  self.epsilon=2 **-52\n  self.mant_dig=53\n  self.max=javascript.Number.MAX_VALUE\n  self.max_exp=2 **10\n  self.max_10_exp=308\n  self.min=2 **(-1022)\n  self.min_exp=-1021\n  self.min_10_exp=-307\n  self.radix=2\n  self.rounds=1\n  self._tuple=(self.max,self.max_exp,self.max_10_exp,self.min,\n  self.min_exp,self.min_10_exp,self.dig,self.mant_dig,self.epsilon,\n  self.radix,self.rounds)\n  \n def __getitem__(self,k):\n  return self._tuple[k]\n  \n def __iter__(self):\n  return iter(self._tuple)\n  \nfloat_info=_float_info()\n\nwarnoptions=[]\n\ndef getfilesystemencoding():\n return 'utf-8'\n \n \n__stdout__=__BRYTHON__.stdout\n__stderr__=__BRYTHON__.stderr\n__stdin__=__BRYTHON__.stdin\n\n__excepthook__=excepthook\n", ["_sys", "javascript"]], "browser.html": [".py", "from _html import *\n", ["_html"]], "browser.local_storage": [".py", "\nimport sys\nfrom browser import window,console\n\nhas_local_storage=hasattr(window,'localStorage')\n\nclass _UnProvided():\n pass\n \nclass LocalStorage():\n storage_type=\"local_storage\"\n \n def __init__(self):\n  if not has_local_storage:\n   raise EnvironmentError(\"LocalStorage not available\")\n  self.store=window.localStorage\n  \n def __delitem__(self,key):\n  if (not isinstance(key,str)):\n   raise TypeError(\"key must be string\")\n  if key not in self:\n   raise KeyError(key)\n  self.store.removeItem(key)\n  \n def __getitem__(self,key):\n  if (not isinstance(key,str)):\n   raise TypeError(\"key must be string\")\n  res=self.store.getItem(key)\n  if res is not None :\n   return res\n  raise KeyError(key)\n  \n def __setitem__(self,key,value):\n  if not isinstance(key,str):\n   raise TypeError(\"key must be string\")\n  if not isinstance(value,str):\n   raise TypeError(\"value must be string\")\n  self.store.setItem(key,value)\n  \n  \n def __contains__(self,key):\n  if (not isinstance(key,str)):\n   raise TypeError(\"key must be string\")\n  res=self.store.getItem(key)\n  if res is None :\n   return False\n  return True\n  \n def __iter__(self):\n  keys=self.keys()\n  return keys.__iter__()\n  \n def get(self,key,default=None ):\n  if (not isinstance(key,str)):\n   raise TypeError(\"key must be string\")\n  return self.store.getItem(key)or default\n  \n def pop(self,key,default=_UnProvided()):\n  if (not isinstance(key,str)):\n   raise TypeError(\"key must be string\")\n  if type(default)is _UnProvided:\n   ret=self.get(key)\n   del self[key]\n   return ret\n  else :\n   if key in self:\n    ret=self.get(key)\n    del self[key]\n    return ret\n   else :\n    return default\n    \n    \n    \n def keys(self):\n  return [self.store.key(i)for i in range(self.store.length)]\n  \n def values(self):\n  return [self.__getitem__(k)for k in self.keys()]\n  \n def items(self):\n  return list(zip(self.keys(),self.values()))\n  \n def clear(self):\n  self.store.clear()\n  \n def __len__(self):\n  return self.store.length\n  \nif has_local_storage:\n storage=LocalStorage()\n", ["browser.console", "browser", "sys", "browser.window"]]}
__BRYTHON__.update_VFS(scripts)